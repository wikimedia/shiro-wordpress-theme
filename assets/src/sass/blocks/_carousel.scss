@import "../../../../node_modules/@splidejs/splide/src/css/core";
@import "../helpers/mixins/mixins-buttons";

.shiro-carousel {
	--carousel-side-padding: #{fluid( 20, 40 )};
	--carousel-vertical-padding: #{fluid( 20, 128 )};
	--carousel-arrow-size: #{rem(44)};
	--carousel-arrow-position: #{fluid( 16, 44 + 32 )}; // arrow size + 32 margin.
	--carousel-arrow-top: 50%;
	--carousel-control-bottom-position: #{rem(16)};
	container-type: inline-size;
	direction: ltr; // rtl: direction: rtl;
	// stylelint-disable selector-class-pattern

	.splide__arrows {
		bottom: var(--carousel-control-bottom-position);
		height: var(--carousel-arrow-size);
		pointer-events: none;
		position: absolute;
		z-index: 1;
		width: 100%;

		&:not(:has(.splide__arrow:not([disabled]))) {
			display: none;
		}
	}

	.splide__arrow {
		@include button-transparent;
		background: radial-gradient( var(--wp--preset--color--main) 50%, var(--wp--preset--color--base) 50% );
		border: 2px solid var(--wp--preset--color--border-light);
		border-radius: 50%;
		bottom: 0;
		box-sizing: content-box;
		height: var(--carousel-arrow-size);
		padding: 0;
		pointer-events: all;
		position: absolute;
		z-index: 1;

		&--prev {
			left: var( --carousel-side-padding );

			&:is(.splide__arrows--ltr .splide__arrow) {
				rotate: 180deg;
			}
		}

		&--next {
			right: var( --carousel-side-padding );

			&:is(.splide__arrows--rtl .splide__arrow) {
				rotate: 180deg;
			}
		}

		&:focus,
		&:hover {
			border-color: var(--wp--preset--color--border-light);
			border-radius: 50%;
			box-shadow: none;
		}

		svg {
			fill: var(--wp--preset--color--base);
			height: 100%;
			width: 100%;
		}
	}

	.splide__arrow[disabled] {
		svg {
			fill: var(--wp--preset--color--black-25);
		}
	}

	&.is-active:has(.splide__pagination),
	&.is-active:has(.splide__arrow:not([disabled])) {
		padding-bottom: rem(80);

		&:has(.wp-block-group.has-background.splide__slide) {
			padding-bottom: 0;
		}

		&:not(:has(.wp-block-group.has-background.splide__slide)) {
			--carousel-side-padding: 0px;
			--carousel-arrow-top: 40%;
		}
	}

	.wp-block-group.has-background.splide__slide {
		padding-bottom: max( rem(80), var( --carousel-vertical-padding ) );
		padding-inline: var( --carousel-side-padding );
		padding-top: min( rem(115), var( --carousel-vertical-padding ) );
	}

	.splide__pagination {
		background: rgba(0, 0, 0, 0.3);
		bottom: calc( var(--carousel-control-bottom-position) + 0.5rem );
		border-radius: rem(15);
		display: flex;
		gap: rem(16);
		left: 50%;
		max-width: calc( 100% - ( ( var(--carousel-arrow-size) + var( --carousel-side-padding ) + #{rem(20)} ) * 2 ) );
		padding: rem(6) rem(10);
		position: absolute;
		transform: translateX(-50%);
		width: max-content;
		z-index: 1;

		button {
			background-color: var(--wp--preset--color--base);
			border: 1px solid var(--wp--preset--color--base);
			border-radius: 50%;
			cursor: pointer;
			height: rem(16);
			padding: 0;
			width: rem(16);

			&.is-active {
				background-color: transparent;
				border-color: var(--wp--preset--color--base);
			}
		}

		// Hide all dots except the current/previous/next.
		li {
			display: none;
		}

		li:has(> button.is-active),
		li:has(+ li > button.is-active),
		li:has(> button.is-active) + li {
			display: flex;
		}
	}

	&:has(.wp-block-query) {
		@include media("<mobile") {
			.splide__list {
				display: grid !important;
			}

			.post:nth-child(n+3) {
				display: none;
			}

			.post:first-child {
				border: 0 none;
				padding-top: 0;
			}
		}
	}

	&:has(.wp-block-query).is-active {
		.splide__list {
			display: flex !important;
			gap: 0 !important;
		}

		.post {
			border: 0 none;
			padding-top: 0;
		}

		+ .wp-block-buttons {
			margin-top: 0;
		}
	}

	// Override bottom margin from blocks used as slides
	.splide__list > * {
		margin-bottom: 0;
	}

	.shiro-carousel__list > .wp-block-group {
		container: slide / inline-size;
	}

	.shiro-carousel__list > .wp-block-group > .wp-block-columns {
		align-content: flex-start;
		height: 100%;

		@container slide ( width < #{ map-get( $breakpoints, "mobile" ) } ) {
			img {
				width: 100%;
			}

			> .wp-block-column {
				display: flex;
				flex-basis: 100% !important;
				flex-direction: column;
				gap: var( --wp--preset--spacing--8 );
			}
		}
	}

	.shiro-carousel__list > .wp-block-group > .wp-block-columns > .wp-block-column {
		// If it is the second and last child and only contains a spacer or empty group, make it first on mobile.
		&:nth-child(2):last-child:has(.wp-block-spacer:only-child),
		&:nth-child(2):last-child:has(.wp-block-group:only-child:empty),
		&:nth-child(2):last-child:has(.wp-block-image:only-child) {
			@include media("<tablet") {
				order: -1;
			}
		}
	}
}

.shiro-carousel:not(.alignfull) {
	&:not(.alignwide) {
		@include media(">=sm_desktop") {
			.splide__arrows {
				@container ( width >= #{ map-get( $breakpoints, "content" ) } ) {
					bottom: initial;
					top: var(--carousel-arrow-top);
					transform: translateY(-50%);
				}
			}

			.splide__arrow {
				&--prev {
					@container ( width >= #{ map-get( $breakpoints, "content" ) } ) {
						left: calc( -1 * var( --carousel-arrow-position ) ); // Get the negative value.
					}
				}

				&--next {
					@container ( width >= #{ map-get( $breakpoints, "content" ) } ) {
						right: calc( -1 * var( --carousel-arrow-position ) ); // Get the negative value.;
					}
				}
			}
		}
	}

	&.alignwide {
		@include media(">=wide") {
			.splide__arrows {
				@container ( width >= #{ map-get( $breakpoints, "desktop" ) } ) {
					bottom: initial;
					top: var(--carousel-arrow-top);
					transform: translateY(-50%);
				}
			}

			.splide__arrow {
				&--prev {
					@container ( width >= #{ map-get( $breakpoints, "desktop" ) } ) {
						left: calc( -1 * var( --carousel-arrow-position ) ); // Get the negative value.
					}
				}

				&--next {
					@container ( width >= #{ map-get( $breakpoints, "desktop" ) } ) {
						right: calc( -1 * var( --carousel-arrow-position ) ); // Get the negative value.;
					}
				}
			}
		}
	}
}

.shiro-carousel.alignfull {
	--carousel-arrow-position: #{fluid( 16, 40 )};

	@include media(">=wide") {
		.splide__arrows {
			@container ( width >= #{ map-get( $breakpoints, "desktop" ) } ) {
				bottom: initial;
				top: var(--carousel-arrow-top);
				transform: translateY(-50%);
			}
		}

		.splide__arrow {
			&--prev {
				@container ( width >= #{ map-get( $breakpoints, "desktop" ) } ) {
					left: var( --carousel-arrow-position );
				}
			}

			&--next {
				@container ( width >= #{ map-get( $breakpoints, "desktop" ) } ) {
					right: var( --carousel-arrow-position );
				}
			}
		}
	}
}
